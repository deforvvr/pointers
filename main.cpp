#include <iostream>

using namespace std;

void f(int *a) { //функция для заполнения массива
    for (int *p = a; p < a+10; ++p){
        *p = (p - a) + 1;
    }
}

void exch (int *a,int *b) {
    int t = *a;
    *a = *b;
    *b = t;
}

int main()
{
    /*
	int a = 21;
	int b = 3;
	string c = "Hello";
	int *pa = &a;
	int *pb = &b;
    string *pc = &c;

	cout << pa << ' ' << pb << '\n';
	cout << *(pc + 2);
	*/
	/*cout << (pa < pb) - указатели можно сравнивать
	меньще тот, который находится в ячейке памяти ближе к нам*/

	/*Для указателей также применима операция ++ и --
	сдвиг будет происходить на кол-во байтов
	зависящее от типа данных переменной и указателя
	int = 4 байта  long long int = 8 байт*/

	/*pa = pb;
	pb = 0; or nullptr or NULL - способы обнуления указателей*/

	/*Операции с указателями:
	& - получение адресса объекта
	* - получение значения объекта по адресу
	в указатели нельзя записывать строки и мат. действия
    кроме тех случаев когда они содержатся в перменной*/

    //Указатели и массивы
    //int a[10]  {};
    /*int *p;
    /*f(a);
    for (p = a; p < a+10; ++p){
        cout << *p << ' ';
    }

    int a = 5; int b = 3;
    exch(&a, &b);
    cout << a << ' ' << b;*/

    //cout << *a; выведен будет 0 элемент массива
    /*int *p = &a[0];
    int *q = &a[9];
    cout << *(p + 2); //a[2]
    cout << *(q - 6); //a[3]
    cout << (q - p); //количество эллементов между указателями - 9
    //ss - ch = ss
    //ss - ss = ch*/


    //Работа с динамической памятью
    /*int *p = new int;
    int *p1;
    int aa = 4;
    p1 = &aa; // DELETE P1 НЕЛЬЗЯ!!!
    *p = 3;
    delete p;
    p = 0;*/


    //Вычисление среднего арифметического динамического массива
    int i, n;
    float s = 0;
    cin >> n;
    //float *a = new float[n];
    float *a;
    a = (float *)malloc(n * sizeof(float));
    for (i = 0; i < n; i++) {
        cin >> *(a + i);
    }
    for (i = 0; i < n; i++) {
        s += *(a + i);
    }

    cout << s / n << '\n';
    //delete []a;
    free(a);
}
